$date
	Thu Feb 26 21:16:11 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module userlogic_test $end
$var wire 32 ! data_out [31:0] $end
$var wire 15 " input_buffer_addr [14:0] $end
$var wire 15 # output_buffer_addr [14:0] $end
$var wire 32 $ ul_instr [31:0] $end
$var wire 32 % ul_instr_addr [31:0] $end
$var wire 32 & ul_read_addr [31:0] $end
$var wire 32 ' ul_read_data [31:0] $end
$var wire 32 ( ul_status [31:0] $end
$var wire 32 ) ul_test [31:0] $end
$var wire 32 * ul_write_addr [31:0] $end
$var wire 32 + ul_write_data [31:0] $end
$var wire 16 , ul_write_data_hi [15:0] $end
$var wire 16 - ul_write_data_lo [15:0] $end
$var wire 2 . ul_write_en_hi [1:0] $end
$var wire 2 / ul_write_en_lo [1:0] $end
$var reg 1 0 clk $end
$var reg 32 1 cycle_count [32:1] $end
$var integer 32 2 dump_vars [31:0] $end
$var reg 8192 3 dump_vars_filename [8192:1] $end
$var integer 32 4 i [31:0] $end
$var reg 10 5 image_n_columns [9:0] $end
$var reg 10 6 image_n_rows [9:0] $end
$var reg 8192 7 input_buffer_filename [8192:1] $end
$var reg 8192 8 instr_mem_filename [8192:1] $end
$var reg 32 9 num_cycles [32:1] $end
$var reg 33 : out_end_addr [32:0] $end
$var reg 33 ; out_start_addr [32:0] $end
$var integer 32 < outfile [31:0] $end
$var reg 8192 = output_buffer_filename [8192:1] $end
$var reg 15 > read_addr [14:0] $end
$var integer 32 ? read_input_buffer [31:0] $end
$var integer 32 @ read_instr_mem [31:0] $end
$var integer 32 A result [31:0] $end
$var reg 1 B rst_n $end
$var reg 8192 C test_result_filename [8192:1] $end
$var reg 32 D ul_command [31:0] $end
$var integer 32 E write_output_buffer [31:0] $end
$var integer 32 F write_test_result [31:0] $end
$scope module instr_mem $end
$var wire 14 G addr [13:0] $end
$var wire 1 H clk $end
$var wire 32 I din [31:0] $end
$var wire 1 J we $end
$var reg 32 K dout [31:0] $end
$upscope $end
$scope module input_buffer $end
$var wire 15 L addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 M din [31:0] $end
$var wire 1 N we $end
$var reg 32 O dout [31:0] $end
$upscope $end
$scope module output_buffer $end
$var wire 15 P addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 Q din [31:0] $end
$var wire 4 R we [3:0] $end
$var reg 32 S dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$scope module ul $end
$var wire 1 T addr_cmd $end
$var wire 1 U addr_iobuf $end
$var wire 1 V addr_local $end
$var wire 1 W addr_status $end
$var wire 1 X addr_test $end
$var wire 1 H clk $end
$var wire 32 Y command [31:0] $end
$var wire 32 Z instr [31:0] $end
$var wire 32 [ instr_addr [31:0] $end
$var wire 32 \ mips_addr [31:0] $end
$var wire 32 ] mips_local_read_data [31:0] $end
$var wire 32 ^ mips_pc [31:0] $end
$var wire 32 _ mips_read_data [31:0] $end
$var wire 1 ` mips_read_en $end
$var wire 4 a mips_write_en [3:0] $end
$var wire 32 b read_addr_hi [31:0] $end
$var wire 32 c read_addr_lo [31:0] $end
$var wire 32 d read_data [31:0] $end
$var wire 16 e read_data_hi [15:0] $end
$var wire 16 f read_data_lo [15:0] $end
$var wire 1 g rst_n $end
$var wire 32 h status [31:0] $end
$var wire 32 i test [31:0] $end
$var wire 32 j write_addr_hi [31:0] $end
$var wire 32 k write_addr_lo [31:0] $end
$var wire 32 l write_data [31:0] $end
$var wire 16 m write_data_hi [15:0] $end
$var wire 16 n write_data_lo [15:0] $end
$var wire 2 o write_en_hi [1:0] $end
$var wire 2 p write_en_lo [1:0] $end
$var reg 32 q cmd_d [31:0] $end
$var reg 1 r read_cmd_d $end
$var reg 1 s read_iobuf_d $end
$var reg 32 t status_reg [31:0] $end
$var reg 32 u test_reg [31:0] $end
$scope module cpu $end
$var wire 32 v alu_op_x_ex [31:0] $end
$var wire 32 w alu_op_x_id [31:0] $end
$var wire 32 x alu_op_y_ex [31:0] $end
$var wire 32 y alu_op_y_id [31:0] $end
$var wire 1 z alu_op_y_zero_ex $end
$var wire 4 { alu_opcode_ex [3:0] $end
$var wire 4 | alu_opcode_id [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 32 ~ alu_result_ex [31:0] $end
$var wire 32 !" alu_result_mem [31:0] $end
$var wire 1 H clk $end
$var wire 1 "" en $end
$var wire 1 #" en_if $end
$var wire 32 $" instr [31:0] $end
$var wire 32 %" instr_id [31:0] $end
$var wire 30 &" instr_number_id [29:0] $end
$var wire 32 '" instr_sav [31:0] $end
$var wire 32 (" jr_pc_id [31:0] $end
$var wire 1 )" jump_branch_id $end
$var wire 1 *" jump_reg_id $end
$var wire 1 +" jump_target_id $end
$var wire 32 ," mem_addr [31:0] $end
$var wire 1 -" mem_byte_ex $end
$var wire 1 ." mem_byte_id $end
$var wire 1 /" mem_byte_mem $end
$var wire 32 0" mem_out [31:0] $end
$var wire 32 1" mem_read_data [31:0] $end
$var wire 32 2" mem_read_data_byte_extend [31:0] $end
$var wire 8 3" mem_read_data_byte_select [7:0] $end
$var wire 1 ` mem_read_en $end
$var wire 1 4" mem_read_ex $end
$var wire 1 5" mem_read_id $end
$var wire 1 6" mem_read_mem $end
$var wire 1 7" mem_signextend_ex $end
$var wire 1 8" mem_signextend_id $end
$var wire 1 9" mem_signextend_mem $end
$var wire 1 :" mem_we_ex $end
$var wire 1 ;" mem_we_id $end
$var wire 32 <" mem_write_data [31:0] $end
$var wire 32 =" mem_write_data_ex [31:0] $end
$var wire 32 >" mem_write_data_id [31:0] $end
$var wire 4 ?" mem_write_en [3:0] $end
$var wire 1 @" movn_ex $end
$var wire 1 A" movn_id $end
$var wire 1 B" movz_ex $end
$var wire 1 C" movz_id $end
$var wire 32 D" pc [31:0] $end
$var wire 32 E" pc_id [31:0] $end
$var wire 32 F" pc_if [31:0] $end
$var wire 1 G" reg_we_cond_ex $end
$var wire 1 H" reg_we_ex $end
$var wire 1 I" reg_we_id $end
$var wire 1 J" reg_we_mem $end
$var wire 1 K" reg_we_wb $end
$var wire 5 L" reg_write_addr_ex [4:0] $end
$var wire 5 M" reg_write_addr_id [4:0] $end
$var wire 5 N" reg_write_addr_mem [4:0] $end
$var wire 5 O" reg_write_addr_wb [4:0] $end
$var wire 32 P" reg_write_data_mem [31:0] $end
$var wire 32 Q" reg_write_data_wb [31:0] $end
$var wire 5 R" rs_addr_id [4:0] $end
$var wire 32 S" rs_data_id [31:0] $end
$var wire 1 T" rst $end
$var wire 1 U" rst_id $end
$var wire 5 V" rt_addr_id [4:0] $end
$var wire 32 W" rt_data_id [31:0] $end
$var wire 1 X" stall $end
$var wire 1 Y" stall_r $end
$scope module if_stage $end
$var wire 1 H clk $end
$var wire 1 #" en $end
$var wire 26 Z" instr_id [25:0] $end
$var wire 32 [" j_addr [31:0] $end
$var wire 1 +" jump_target $end
$var wire 32 \" pc [31:0] $end
$var wire 32 ]" pc_id [31:0] $end
$var wire 32 ^" pc_id_p4 [31:0] $end
$var wire 32 _" pc_next [31:0] $end
$var wire 1 T" rst $end
$scope module pc_reg $end
$var wire 1 H clk $end
$var wire 32 `" d [31:0] $end
$var wire 1 #" en $end
$var wire 1 T" r $end
$var reg 32 a" q [31:0] $end
$upscope $end
$upscope $end
$scope module pc_if2id $end
$var wire 1 H clk $end
$var wire 32 b" d [31:0] $end
$var wire 1 #" en $end
$var wire 1 T" r $end
$var reg 32 c" q [31:0] $end
$upscope $end
$scope module instr_sav_dff $end
$var wire 1 H clk $end
$var wire 32 d" d [31:0] $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 32 e" q [31:0] $end
$upscope $end
$scope module stall_f_dff $end
$var wire 1 H clk $end
$var wire 1 X" d $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 1 f" q $end
$upscope $end
$scope module d_stage $end
$var wire 32 g" alu_op_x [31:0] $end
$var wire 32 h" alu_op_y [31:0] $end
$var wire 32 i" alu_result_ex [31:0] $end
$var wire 1 j" forward_rs_mem $end
$var wire 6 k" funct [5:0] $end
$var wire 32 l" imm [31:0] $end
$var wire 32 m" imm_no_extend [31:0] $end
$var wire 32 n" imm_sign_extend [31:0] $end
$var wire 32 o" imm_upper [31:0] $end
$var wire 16 p" immediate [15:0] $end
$var wire 32 q" instr [31:0] $end
$var wire 1 r" isALUImm $end
$var wire 1 s" isBEQ $end
$var wire 1 t" isBGEZAL $end
$var wire 1 u" isBGEZNL $end
$var wire 1 v" isBGTZ $end
$var wire 1 w" isBLEZ $end
$var wire 1 x" isBLTZAL $end
$var wire 1 y" isBLTZNL $end
$var wire 1 z" isBNE $end
$var wire 1 {" isBranchLink $end
$var wire 1 |" isEqual $end
$var wire 1 }" isJ $end
$var wire 1 ~" isLUI $end
$var wire 1 !# isSLL $end
$var wire 1 "# isSLLV $end
$var wire 1 ## isSRA $end
$var wire 1 $# isSRAV $end
$var wire 1 %# isSRL $end
$var wire 1 &# isSRLV $end
$var wire 1 '# isShift $end
$var wire 1 (# isShiftImm $end
$var wire 32 )# jr_pc [31:0] $end
$var wire 1 )" jump_branch $end
$var wire 1 *" jump_reg $end
$var wire 1 +" jump_target $end
$var wire 1 ." mem_byte $end
$var wire 1 5" mem_read $end
$var wire 1 4" mem_read_ex $end
$var wire 1 8" mem_signextend $end
$var wire 1 ;" mem_we $end
$var wire 32 *# mem_write_data [31:0] $end
$var wire 1 A" movn $end
$var wire 1 C" movz $end
$var wire 6 +# op [5:0] $end
$var wire 32 ,# pc [31:0] $end
$var wire 5 -# rd_addr [4:0] $end
$var wire 1 .# read_from_rs $end
$var wire 1 /# read_from_rt $end
$var wire 1 I" reg_we $end
$var wire 1 H" reg_we_ex $end
$var wire 1 J" reg_we_mem $end
$var wire 5 0# reg_write_addr [4:0] $end
$var wire 5 1# reg_write_addr_ex [4:0] $end
$var wire 5 2# reg_write_addr_mem [4:0] $end
$var wire 32 3# reg_write_data_mem [31:0] $end
$var wire 5 4# rs_addr [4:0] $end
$var wire 32 5# rs_data [31:0] $end
$var wire 32 6# rs_data_in [31:0] $end
$var wire 1 7# rs_mem_dependency $end
$var wire 5 8# rt_addr [4:0] $end
$var wire 32 9# rt_data [31:0] $end
$var wire 32 :# rt_data_in [31:0] $end
$var wire 5 ;# shamt [4:0] $end
$var wire 32 <# shift_amount [31:0] $end
$var wire 1 X" stall $end
$var wire 1 =# use_imm $end
$var reg 4 ># alu_opcode [3:0] $end
$upscope $end
$scope module alu_op_x_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 32 ?# d [31:0] $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 32 @# q [31:0] $end
$upscope $end
$scope module alu_op_y_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 32 A# d [31:0] $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 32 B# q [31:0] $end
$upscope $end
$scope module alu_opcode_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 4 C# d [3:0] $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 4 D# q [3:0] $end
$upscope $end
$scope module movn $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 1 A" d $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 1 E# q $end
$upscope $end
$scope module movz $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 1 C" d $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 1 F# q $end
$upscope $end
$scope module mem_write_data_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 32 G# d [31:0] $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 32 H# q [31:0] $end
$upscope $end
$scope module mem_we_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 1 ;" d $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 1 I# q $end
$upscope $end
$scope module mem_read_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 1 J# d $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 1 K# q $end
$upscope $end
$scope module mem_byte_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 1 ." d $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 1 L# q $end
$upscope $end
$scope module mem_signextend_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 1 8" d $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 1 M# q $end
$upscope $end
$scope module reg_write_addr_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 5 N# d [4:0] $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 5 O# q [4:0] $end
$upscope $end
$scope module reg_we_id2ex $end
$var wire 1 T" ar $end
$var wire 1 H clk $end
$var wire 1 I" d $end
$var wire 1 "" en $end
$var wire 1 U" r $end
$var reg 1 P# q $end
$upscope $end
$scope module x_stage $end
$var wire 1 Q# add_check $end
$var wire 1 R# add_neg_over $end
$var wire 1 S# add_pos_over $end
$var wire 1 T# alu_neg $end
$var wire 32 U# alu_op_x [31:0] $end
$var wire 32 V# alu_op_x_signed [31:0] $end
$var wire 32 W# alu_op_y [31:0] $end
$var wire 32 X# alu_op_y_signed [31:0] $end
$var wire 1 z alu_op_y_zero $end
$var wire 4 Y# alu_opcode [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 1 Z# sub_check $end
$var wire 1 [# sub_neg_over $end
$var wire 1 \# sub_pos_over $end
$var wire 1 ]# x_neg $end
$var wire 1 ^# y_neg $end
$var reg 32 _# alu_op_y_reg_signed [31:0] $end
$var reg 32 `# alu_result [31:0] $end
$upscope $end
$scope module alu_result_ex2mem $end
$var wire 1 H clk $end
$var wire 32 a# d [31:0] $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 32 b# q [31:0] $end
$upscope $end
$scope module mem_read_ex2mem $end
$var wire 1 H clk $end
$var wire 1 c# d $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 1 d# q $end
$upscope $end
$scope module mem_byte_ex2mem $end
$var wire 1 H clk $end
$var wire 1 -" d $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 1 e# q $end
$upscope $end
$scope module mem_signextend_ex2mem $end
$var wire 1 H clk $end
$var wire 1 7" d $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 1 f# q $end
$upscope $end
$scope module reg_write_addr_ex2mem $end
$var wire 1 H clk $end
$var wire 5 g# d [4:0] $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 5 h# q [4:0] $end
$upscope $end
$scope module reg_we_ex2mem $end
$var wire 1 H clk $end
$var wire 1 H" d $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 1 i# q $end
$upscope $end
$scope module reg_write_data_mem2wb $end
$var wire 1 H clk $end
$var wire 32 j# d [31:0] $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 32 k# q [31:0] $end
$upscope $end
$scope module reg_write_addr_mem2wb $end
$var wire 1 H clk $end
$var wire 5 l# d [4:0] $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 5 m# q [4:0] $end
$upscope $end
$scope module reg_we_mem2wb $end
$var wire 1 H clk $end
$var wire 1 J" d $end
$var wire 1 "" en $end
$var wire 1 T" r $end
$var reg 1 n# q $end
$upscope $end
$scope module w_stage $end
$var wire 1 H clk $end
$var wire 1 "" en $end
$var wire 1 K" reg_we $end
$var wire 5 o# reg_write_addr [4:0] $end
$var wire 32 p# reg_write_data [31:0] $end
$var wire 5 q# rs_addr [4:0] $end
$var wire 32 r# rs_data [31:0] $end
$var wire 5 s# rt_addr [4:0] $end
$var wire 32 t# rt_data [31:0] $end
$upscope $end
$upscope $end
$scope module mips_local_store $end
$var wire 12 u# addr [11:0] $end
$var wire 1 H clk $end
$var wire 32 v# din [31:0] $end
$var wire 4 w# we [3:0] $end
$var reg 32 x# dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx x#
b0 w#
b0 v#
b0 u#
bx t#
bx s#
bx r#
bx q#
b0 p#
b0 o#
0n#
b0 m#
b0 l#
b0 k#
b0 j#
0i#
b0 h#
b0 g#
0f#
0e#
0d#
0c#
b0 b#
b0 a#
b0 `#
b0 _#
0^#
0]#
0\#
0[#
0Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
0T#
0S#
0R#
0Q#
0P#
b0 O#
bx N#
0M#
0L#
0K#
0J#
0I#
b0 H#
bx G#
0F#
0E#
b0 D#
b1101 C#
b0 B#
bx A#
b0 @#
bx ?#
b1101 >#
x=#
b0xxxxx <#
bx ;#
bx :#
bx 9#
bx 8#
07#
bx 6#
bx 5#
bx 4#
b0 3#
b0 2#
b0 1#
bx 0#
x/#
x.#
bx -#
b0 ,#
bx +#
bx *#
bx )#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
bx q"
bx p"
bx0000000000000000 o"
bx n"
b0xxxxxxxxxxxxxxxx m"
bx l"
bx k"
0j"
b0 i"
bx h"
bx g"
0f"
b0 e"
bx d"
b0 c"
b0 b"
b0 a"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 `"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 _"
b100 ^"
b0 ]"
b0 \"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ["
bx Z"
0Y"
0X"
bx W"
bx V"
0U"
0T"
bx S"
bx R"
b0 Q"
b0 P"
b0 O"
b0 N"
bx M"
b0 L"
0K"
0J"
xI"
0H"
0G"
b0 F"
b0 E"
b0 D"
xC"
0B"
xA"
0@"
b0 ?"
bx >"
b0 ="
b0 <"
x;"
0:"
09"
x8"
07"
06"
05"
04"
bx 3"
b0xxxxxxxx 2"
bx 1"
bx 0"
0/"
x."
0-"
b0 ,"
x+"
0*"
x)"
bx ("
b0 '"
b0 &"
bx %"
bx $"
1#"
1""
b0 !"
b0 ~
0}
b1101 |
b0 {
1z
bx y
b0 x
bx w
b0 v
bx u
bx t
xs
xr
bx q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
bx i
bx h
0g
bx f
bx e
bx d
b0 c
b0 b
b0 a
0`
bx _
b0 ^
bx ]
b0 \
b0 [
bx Z
b0xxxxxxxxxxxxxxxxxxxx10 Y
0X
0W
1V
0U
0T
bx S
b0 R
b0 Q
b0 P
bx O
0N
b0 M
b0 L
bx K
0J
b0 I
0H
b0 G
b1 F
b0 E
b0xxxxxxxxxxxxxxxxxxxx10 D
b11101000110010101110011011101000111001100101111011011000111010101101001001011110111010001100101011100110111010000101110011100100110010101110011011101010110110001110100 C
0B
b1 A
b1 @
b0 ?
b0 >
bx =
bx <
b0 ;
b100000000000000000 :
b1111101000 9
b111010001100101011100110111010001110011001011110110110001110101011010010010111101100010011101010110100101101100011001000010111101100001011100000111000000101110011010000110010101111000 8
bx 7
bx 6
bx 5
bx 4
b11101000110010101110011011101000111001100101111011011000111010101101001001011110111001101110100011100100110010101100001011011010111011101100001011101100110010100101110011101100110001101100100 3
b1 2
b0 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
bx )
bx (
bx '
b0 &
b0 %
bx $
b0 #
b0 "
bx !
$end
#5000
0'#
b0 <#
b0 w
b0 g"
b0 ?#
0(#
b0 5#
b0 ("
b0 )#
0{"
0)"
b10000000000000100000000000000000 y
b10000000000000100000000000000000 h"
b10000000000000100000000000000000 A#
b0 S"
b0 6#
b0 r#
0u"
1I"
0t"
0v"
0w"
0y"
0x"
b10000 M"
b10000 0#
b10000 N#
0!#
0%#
0"#
0&#
0##
0$#
b1100 >#
b1100 |
b1100 C#
b10000000000000100000000000000000 l"
b100 _"
b100 `"
0s"
0z"
0}"
0+"
1=#
0.#
0/#
1~"
0r"
0;"
0."
18"
b1111 +#
b0 R"
b0 4#
b0 q#
b10000 V"
b10000 8#
b10000 s#
b10000 -#
b0 ;#
0A"
0C"
b10 k"
b11111111111111111000000000000010 n"
b1000000000000010 m"
b10000000000000100000000000000000 o"
b1000000000000010 p"
b100001000000000000010 Z"
b10000100000000000001000 ["
b111100000100001000000000000010 %"
b111100000100001000000000000010 q"
b111100000100001000000000000010 K
b111100000100001000000000000010 $
b111100000100001000000000000010 Z
b111100000100001000000000000010 $"
b111100000100001000000000000010 d"
bx S
bx x#
b0 u
b0 )
b0 i
b0 t
b0 (
b0 h
0s
0r
b0 q
10
1H
#10000
00
0H
#15000
bx x#
bx S
10
1H
#20000
1T"
00
0H
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
1B
1g
#25000
0V
bx ,
bx m
bx +
bx Q
bx -
bx n
0S#
1\#
1T#
b1 G
1H"
bx l
bx <"
bx v#
1^#
b10000000000000100000000000000000 `#
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 i"
b10000000000000100000000000000000 a#
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ,"
b10000000000000100000000000000000 _#
b1000 _"
b1000 `"
b1 %
b1 [
bx S
bx x#
1P#
1G"
b10000 O#
b10000 L"
b10000 1#
b10000 g#
1M#
17"
bx H#
bx ="
b1100 D#
b1100 {
b1100 Y#
b10000000000000100000000000000000 B#
b10000000000000100000000000000000 X#
0z
b10000000000000100000000000000000 x
b10000000000000100000000000000000 W#
b111100000100001000000000000010 e"
b111100000100001000000000000010 '"
b100 a"
b100 F"
b100 \"
b100 b"
b100 ^
b100 D"
10
1H
#30000
00
0H
b1111100111 1
b0xxxxxxxxxxxxxxxxxxxx01 D
b0xxxxxxxxxxxxxxxxxxxx01 Y
#35000
b1 y
b1 h"
b1 A#
b10001 M"
b10001 0#
b10001 N#
b11 >#
b11 |
b11 C#
b1 l"
1.#
0~"
1r"
b1101 +#
b10001 V"
b10001 8#
b10001 s#
b0 -#
b1 k"
b1 n"
b1 m"
b10000000000000000 o"
b1 p"
b100010000000000000001 Z"
b10001000000000000000100 ["
b10 G
b110100000100010000000000000001 %"
b110100000100010000000000000001 q"
b1100 _"
b1100 `"
b10 %
b10 [
b1 &"
bx 2"
bx x#
bx S
b110100000100010000000000000001 K
b110100000100010000000000000001 $
b110100000100010000000000000001 Z
b110100000100010000000000000001 $"
b110100000100010000000000000001 d"
b1000 a"
b1000 F"
b1000 \"
b1000 b"
b1000 ^
b1000 D"
b100 c"
b1000 ^"
b100 E"
b100 ]"
b100 ,#
b10000000000000100000000000000000 b#
b10000000000000100000000000000000 !"
b10000000000000100000000000000000 P"
b10000000000000100000000000000000 3#
b10000000000000100000000000000000 j#
1f#
19"
b10000 h#
b10000 N"
b10000 2#
b10000 l#
1i#
1J"
10
1H
#40000
00
0H
b1111100110 1
#45000
1'#
1(#
0.#
b0 l"
b0 y
b0 h"
b0 A#
b0 M"
b0 0#
b0 N#
b0 >"
b0 *#
b0 G#
b0 9#
1|"
b0 W"
b0 :#
b0 t#
1!#
b1010 >#
b1010 |
b1010 C#
1V
0=#
1/#
0r"
b0 +#
b0 V"
b0 8#
b0 s#
b0 k"
b0 n"
b0 m"
b0 o"
b0 p"
b0 Z"
b0 ["
0T#
b11 G
b0 %"
b0 q"
0\#
0^#
b1 `#
b1 ~
b1 i"
b1 a#
0U
0W
b1 \
b1 ,"
b1 _#
b10 &"
b10000 _"
b10000 `"
b11 %
b11 [
b0 K
b0 $
b0 Z
b0 $"
b0 d"
bx S
bx x#
1n#
1K"
b10000 m#
b10000 O"
b10000 o#
b10000000000000100000000000000000 k#
b10000000000000100000000000000000 Q"
b10000000000000100000000000000000 p#
b10001 O#
b10001 L"
b10001 1#
b10001 g#
b11 D#
b11 {
b11 Y#
b1 B#
b1 X#
b1 x
b1 W#
b110100000100010000000000000001 e"
b110100000100010000000000000001 '"
b1000 c"
b1100 ^"
b1000 E"
b1000 ]"
b1000 ,#
b1100 a"
b1100 F"
b1100 \"
b1100 b"
b1100 ^
b1100 D"
10
1H
#50000
00
0H
b1111100101 1
#55000
b100 G
b0 ,
b0 m
b0 +
b0 Q
b0 -
b0 n
b10100 _"
b10100 `"
b100 %
b100 [
b11 &"
b0 `#
b0 ~
b0 i"
b0 a#
b0 \
b0 ,"
b0 _#
b0 l
b0 <"
b0 v#
bx x#
bx S
b10000 a"
b10000 F"
b10000 \"
b10000 b"
b10000 ^
b10000 D"
b1100 c"
b10000 ^"
b1100 E"
b1100 ]"
b1100 ,#
b0 e"
b0 '"
b0 B#
b0 X#
1z
b0 x
b0 W#
b1010 D#
b1010 {
b1010 Y#
b0 H#
b0 ="
b0 O#
b0 L"
b0 1#
b0 g#
b1 b#
b1 !"
b1 P"
b1 3#
b1 j#
b10001 h#
b10001 N"
b10001 2#
b10001 l#
10
1H
#60000
00
0H
b1111100100 1
#65000
b10000000000000100000000000000000 w
b10000000000000100000000000000000 g"
b10000000000000100000000000000000 ?#
0'#
0(#
1.#
b100 y
b100 h"
b100 A#
b100 l"
b10001 M"
b10001 0#
b10001 N#
b10000000000000100000000000000000 5#
b10000000000000100000000000000000 ("
b10000000000000100000000000000000 )#
b10000000000000100000000000000000 S"
b10000000000000100000000000000000 6#
b10000000000000100000000000000000 r#
b1 >"
b1 *#
b1 G#
b1 9#
0|"
b1 W"
b1 :#
b1 t#
0!#
b1101 >#
b1101 |
b1101 C#
1=#
0I"
1;"
b101011 +#
0j"
b10000 R"
b10000 4#
b10000 q#
b10001 V"
b10001 8#
b10001 s#
b100 k"
b100 n"
b100 m"
b1000000000000000000 o"
b100 p"
b10000100010000000000000100 Z"
b1000010001000000000000010000 ["
b101 G
b10101110000100010000000000000100 %"
b10101110000100010000000000000100 q"
b100 &"
b11000 _"
b11000 `"
b101 %
b101 [
b10101110000100010000000000000100 K
b10101110000100010000000000000100 $
b10101110000100010000000000000100 Z
b10101110000100010000000000000100 $"
b10101110000100010000000000000100 d"
bx S
bx x#
b10001 m#
b10001 O"
b10001 o#
b1 k#
b1 Q"
b1 p#
b0 h#
b0 N"
b0 2#
b0 l#
b0 b#
b0 !"
b0 P"
b0 3#
b0 j#
b10000 c"
b10100 ^"
b10000 E"
b10000 ]"
b10000 ,#
b10100 a"
b10100 F"
b10100 \"
b10100 b"
b10100 ^
b10100 D"
10
1H
#70000
00
0H
b1111100011 1
#75000
b0 y
b0 h"
b0 A#
b0 l"
0V
b1 "
b1 L
b0 k"
b0 n"
b0 m"
b0 o"
b0 p"
b10000100010000000000000000 Z"
b1000010001000000000000000000 ["
b110 G
0S#
1T#
b1 u#
b1 j
b1 *
b1 k
b1 b
b1 &
b1 c
b1 +
b1 Q
b1 -
b1 n
b0 w#
b10101110000100010000000000000000 %"
b10101110000100010000000000000000 q"
b11100 _"
b11100 `"
b110 %
b110 [
b101 &"
0[#
1]#
b10000000000000100000000000000100 `#
b10000000000000100000000000000100 ~
b10000000000000100000000000000100 i"
b10000000000000100000000000000100 a#
1X
b10000000000000100000000000000100 \
b10000000000000100000000000000100 ,"
b100 _#
b1 l
b1 <"
b1 v#
b1111 a
b1111 ?"
0H"
bx x#
bx S
b10101110000100010000000000000000 K
b10101110000100010000000000000000 $
b10101110000100010000000000000000 Z
b10101110000100010000000000000000 $"
b10101110000100010000000000000000 d"
b11000 a"
b11000 F"
b11000 \"
b11000 b"
b11000 ^
b11000 D"
b10100 c"
b11000 ^"
b10100 E"
b10100 ]"
b10100 ,#
b10101110000100010000000000000100 e"
b10101110000100010000000000000100 '"
b10000000000000100000000000000000 @#
b10000000000000100000000000000000 V#
b10000000000000100000000000000000 v
b10000000000000100000000000000000 U#
b100 B#
b100 X#
0z
b100 x
b100 W#
b1101 D#
1Q#
b1101 {
b1101 Y#
b1 H#
b1 ="
1I#
1:"
b10001 O#
b10001 L"
b10001 1#
b10001 g#
0P#
0G"
b0 k#
b0 Q"
b0 p#
b0 m#
b0 O"
b0 o#
10
1H
#80000
00
0H
b1111100010 1
#85000
b0 w
b0 g"
b0 ?#
b110 y
b110 h"
b110 A#
1|"
b0 5#
b0 ("
b0 )#
b110 l"
b0 S"
b0 6#
b0 r#
b0 M"
b0 0#
b0 N#
b0 >"
b0 *#
b0 G#
b0 9#
b0 W"
b0 :#
b0 t#
b1011 >#
b1011 |
b1011 C#
b0 "
b0 L
1}"
0.#
0/#
1+"
0I"
0;"
b10 +#
b0 R"
b0 4#
b0 q#
b0 V"
b0 8#
b0 s#
b110 k"
b110 n"
b110 m"
b1100000000000000000 o"
b110 p"
b110 Z"
b11000 ["
b0 u#
b0 j
b0 *
b0 k
b0 b
b0 &
b0 c
b111 G
b1000000000000000000000000110 %"
b1000000000000000000000000110 q"
b10000000000000100000000000000000 `#
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 i"
b10000000000000100000000000000000 a#
0X
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ,"
b0 _#
b110 &"
b11000 _"
b11000 `"
b111 %
b111 [
b1000000000000000000000000110 K
b1000000000000000000000000110 $
b1000000000000000000000000110 Z
b1000000000000000000000000110 $"
b1000000000000000000000000110 d"
bx S
bx x#
b1 u
b1 )
b1 i
0i#
0J"
b10001 h#
b10001 N"
b10001 2#
b10001 l#
b10000000000000100000000000000100 b#
b10000000000000100000000000000100 !"
b10000000000000100000000000000100 P"
b10000000000000100000000000000100 3#
b10000000000000100000000000000100 j#
b0 B#
b0 X#
1z
b0 x
b0 W#
b10101110000100010000000000000000 e"
b10101110000100010000000000000000 '"
b11000 c"
b11100 ^"
b11000 E"
b11000 ]"
b11000 ,#
b11100 a"
b11100 F"
b11100 \"
b11100 b"
b11100 ^
b11100 D"
10
1H
#90000
00
0H
b1111100001 1
#95000
1'#
1(#
b0 l"
b0 y
b0 h"
b0 A#
1!#
b1010 >#
b1010 |
b1010 C#
b11100 _"
b11100 `"
1V
1I"
0}"
0.#
1/#
0+"
0=#
b0 +#
b0 k"
b0 n"
b0 m"
b0 o"
b0 p"
b0 Z"
b0 ["
b110 G
0T#
b0 +
b0 Q
b0 -
b0 n
b0 %"
b0 q"
b110 %
b110 [
b111 &"
0]#
b0 `#
b0 ~
b0 i"
b0 a#
0U
0W
b0 \
b0 ,"
b110 _#
b0 l
b0 <"
b0 v#
b0 a
b0 ?"
b1 t
b1 (
b1 h
bx x#
bx S
b0 K
b0 $
b0 Z
b0 $"
b0 d"
b11000 a"
b11000 F"
b11000 \"
b11000 b"
b11000 ^
b11000 D"
b11100 c"
b100000 ^"
b11100 E"
b11100 ]"
b11100 ,#
b1000000000000000000000000110 e"
b1000000000000000000000000110 '"
b0 @#
b0 V#
b0 v
b0 U#
b110 B#
b110 X#
0z
b110 x
b110 W#
b1011 D#
0Q#
b1011 {
b1011 Y#
b0 H#
b0 ="
0I#
0:"
b0 O#
b0 L"
b0 1#
b0 g#
b10000000000000100000000000000000 b#
b10000000000000100000000000000000 !"
b10000000000000100000000000000000 P"
b10000000000000100000000000000000 3#
b10000000000000100000000000000000 j#
b10000000000000100000000000000100 k#
b10000000000000100000000000000100 Q"
b10000000000000100000000000000100 p#
b10001 m#
b10001 O"
b10001 o#
0n#
0K"
10
1H
#100000
00
0H
b10000000000000000000000000000011 4
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
